AWSTemplateFormatVersion: 2010-09-09
Description: |

Parameters:
  ServerKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Your Amazon EC2 Key Pair.

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC all the resources should be deployed to.

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose which subnets all the resources should be deployed to.

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium

  TagName:
    Description: A Tag "Name" to be added or prefixed to resources, e.g. it can be your product/project Name.
    Type: String
    AllowedPattern: .+

  DesiredCapacityASG:
    Description: Desired Capacity for Auto Scaling Group.
    Type: String
    AllowedPattern: .+

  MinSizeASG:
    Description: Min Size for Auto Scaling Group.
    Type: String
    AllowedPattern: .+

  MaxSizeASG:
    Description: Max Size for Auto Scaling Group.
    Type: String
    AllowedPattern: .+


Mappings:
  RegionArchToAMI:
    us-east-1:
      HVM64: ami-06ed773a6d51e1f74
    us-east-2:
      HVM64: ami-0001dda08df1f9503
    us-west-1:
      HVM64: ami-0c7a5e8badebc9252
    us-west-2:
      HVM64: ami-06a9aedd8ac9d6e87
    af-south-1:
      HVM64: ami-0ee55c43a87275e58
    ap-east-1:
      HVM64: ami-0005fefdada2bbe87
    ap-south-1:
      HVM64: ami-0de468bb89240e52b
    ap-northeast-2:
      HVM64: ami-0d0b4fe27196f88e9
    ap-southeast-1:
      HVM64: ami-0396b01d2343803dc
    ap-southeast-2:
      HVM64: ami-07a94a93ac1559b53
    ap-northeast-1:
      HVM64: ami-0cf93d65a0d7db690
    ca-central-1:
      HVM64: ami-06d68be17c7478e53
    eu-central-1:
      HVM64: ami-0a1d3609556f237d9
    eu-west-1:
      HVM64: ami-0e0466b783912f0e7
    eu-west-2:
      HVM64: ami-0d00661b84bb84cab
    eu-south-1:
      HVM64: ami-06ae3e2561bab4275
    eu-west-3:
      HVM64: ami-0930607b3bfabd872
    eu-north-1:
      HVM64: ami-0eb8e6b80d471b2b9
    me-south-1:
      HVM64: ami-06a1038b2390c6cbf
    sa-east-1:
      HVM64: ami-0206fdca07be0109d

Resources:
  WebServerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: String
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: !Join ['-', [!Ref TagName, 'Role']]
      Tags:
        - Key: Name
          Value: !Ref TagName

  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref WebServerRole

  WebServerPlacementGroup:
    Type: "AWS::EC2::PlacementGroup"
    Properties:
      Strategy: spread

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable secure access to the Application Load Balacer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Ref TagName

  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable secure access to the web server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Ref TagName

  WebServerLaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Join ['', [!Ref TagName, 'LT']]
      LaunchTemplateData:
        ImageId: !FindInMap [ RegionArchToAMI, !Ref "AWS::Region", HVM64 ]
        InstanceType: !Ref InstanceType
        KeyName: !Ref ServerKeyPair
        SecurityGroupIds:
          - !Ref WebServerSecurityGroup
        Placement:
          GroupName: !Ref WebServerPlacementGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: !Ref TagName
          - ResourceType: volume
            Tags:
            - Key: Name
              Value: !Ref TagName
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        UserData: !Base64 |
          #!/bin/bash -xe

          ## Code Deploy Agent Bootstrap Script##

          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          function installdep(){

            yum install -y ruby jq
          }

          function execute(){

            wget https://aws-codedeploy-${REGION}.s3.amazonaws.com/latest/install
            chmod +x ./install

            if ./install auto; then
              echo "Instalation completed"
              exit 0
            else
              echo "Instalation script failed, please investigate"
              rm -f /install
              exit 1
            fi
          }

          installdep
          REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r ".region")
          execute

  WebServerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Join ['', [!Ref TagName, 'TargetGroup']]
      TargetType: instance
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckPort: '3000'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Ref TagName

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Join ['', [!Ref TagName, 'ApplicationLoadBalancer']]
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets
      Tags:
        - Key: Name
          Value: !Ref TagName

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref WebServerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  WebServerScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Join ['', [!Ref TagName, 'AutoScalingGroup']]
      DesiredCapacity: !Ref DesiredCapacityASG
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref MaxSizeASG
      MinSize: !Ref MinSizeASG
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier: !Ref Subnets
      TargetGroupARNs:
        - !Ref WebServerTargetGroup
      Tags:
        - Key: Name
          Value: !Ref TagName
          PropagateAtLaunch: True

  WebServerScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerScalingGroup
      Cooldown: '300'
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerScalingGroup
      Cooldown: '180'
      ScalingAdjustment: -1

  HighCPUAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: High CPU
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerScalingGroup
      Statistic: Average
      Period: 300
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 70
      EvaluationPeriods: 1
      AlarmDescription: Alarm if CPU is too high
      AlarmActions:
      - Ref: WebServerScaleUpPolicy

  LowCPUAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: Low CPU
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerScalingGroup
      Statistic: Average
      Period: 300
      ComparisonOperator: LessThanOrEqualToThreshold
      Threshold: 50
      EvaluationPeriods: 1
      AlarmDescription: Alarm if CPU is too low
      AlarmActions:
      - Ref: WebServerScaleDownPolicy

Outputs:
  ApplicationLoadBalancerDNS:
    Description: DNS Name for the Application Load Balancer
    Value: !Join ['', ['http://', !GetAtt ApplicationLoadBalancer.DNSName]]
